#!/usr/bin/env python3
import sys
import os
import shutil
import json
import re

#
#  Overview: This is a single page project, for minimalizing the file dependencies, and for making this project simple to use.
# There are many section in this file:
# - COLORS - Unicode string color
# - CHUNKS - Various chunks for manipulate C files
# - FUNCTIONS - General internal functions
# - COMMANDS - Command function for every cli command
# - PROGRAM - The Main Program
#
# @Trick: If you want to move more fastly search `__SECTION' in your editor for scrolling among them
#        for example in emacs you can use this custom command:
#
#  (defun find-section ()
#   "Find the next section"
#   (interactive)
#   (search-forward "__SECTION"))
# (global-set-key (kbd "M-n") 'find-section)

# (defun find-backward ()
#   "Find the previous section"
#   (interactive)
#   (search-backward "__SECTION"))
# (global-set-key (kbd "M-p") 'find-backward)

# (defun create-section ()
#   "Create a section"
# 	(interactive) 
#     (insert "__SECTION")   
#     (comment-region (line-beginning-position) (line-end-position))
#   )
#


"""

 // __SECTION COLORS //

"""
dummy_tx_red = "\033[31m"
dummy_tx_green = "\033[32m"
dummy_tx_yellow = "\033[33m"
dummy_tx_blue = "\033[34m"
dummy_tx_italic = "\033[3m"
dummy_tx_bold = "\033[1m"
dummy_tx_reset = "\033[0m"
dummy_bg_red = "\033[41m"
dummy_bg_green = "\033[42m"
dummy_bg_yellow = "\033[43m"
dummy_bg_blue = "\033[44m"
dummy_bg_magenta = "\033[45m"
dummy_bg_white = "\033[47m"
dummy_bg_black = "\033[40m"
dummy_tx_underline = "\033[4m"


"""

 // __SECTION CHUNKS //

"""

test_regex = r'dummy_code_t\s+(\w+)\(\)'
path_tests = 'tests/src/'
path_h = 'tests/include/'

help_output = """
Usage: dummytest <action> [options]

Actions:
  -i, --init [project_name]        Initialize the project. Optionally specify a project name.
  -m, --make <type> <name>         Create a new suite or test. Type must be "suite" or "test".
    suite <suite_name>             Create a new test suite.
    test <suite_name>:<test_name>  Create a new test within a suite.
  -r, --remove <type> <name>       Remove an existing suite or test. Type must be "suite" or "test".
    suite <suite_name>             Remove a test suite.
    test <suite_name>:<test_name>  Remove a test from a suite.
  -b, --build <mode> [name]        Build the project or a specific suite.
    all                            Build the entire project.
    suite <suite_name>             Build a specific test suite.
  -l, --list <type>                List suites or tests.
    all                            List all tests.
    suite <suite_name>             List tests in a specific suite.
  -R, --run                        Run the tests.
  -c, --config <field> <value>     Set or update configuration in config.json.
  -C, --clean                      Clean up generated files and directories.
  --help                           Show this help message and exit.

For more information on a specific command, use 'dummytest <action> --help'.
"""


template_make_file = """
CFLAGS += -Wall -Wextra -Werror -pedantic -Wconversion -Wshadow -std=§ -O2
LDFLAGS += -lm

TARGET = test

SRCS = test.c £
OBJS = $(SRCS:.c=.o)

all: $(TARGET)

$(TARGET): $(OBJS)
	$(CC) -o $@ $^ $(LDFLAGS)

%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

clean:
	rm -f $(TARGET) $(OBJS)
"""

template_suite = '''#include <stdlib.h>
#include <stdio.h>
#include "../../include/dummytest.h"

Dummy_single_test $[] = {};\n\n'''


template_unit = '''dummy_code_t $()
{
    //DUMMY_SKIP_HERE
    /*
     * Insert your unit test code here.
     *
     * Use assertions to evaluate expressions. For example:
     * DUMMY_ASSERT(actual, expected);
     *
     * Ensure that the test covers all relevant scenarios and includes appropriate error checks.
     *
     * Finally, call DUMMY_END to conclude the test.
     */
    DUMMY_END;
}\n\n'''


template_main = """
#include <stdlib.h>
#include <stdio.h>
#include "include/dummy.h"

int main()
{
    print_logo();
    return 0;

}"""

template_main_func = """
\tdummy_test_suite($, £, @)"""

template_suite_h = """
#ifndef @
#define @

#include <stdlib.h>
#include <stdio.h>
#include "../../include/dummytest.h"


extern Dummy_single_test $[];
#endif
"""

template_unit_func = """dummy_code_t $();\n"""

template_header_cpp = """
IFNDEF $_H
#define $_H

class ${

   public:
       $();
       ~();
};

#endif

"""
template_source_cpp = """
$::$(){}

$::~$(){}
"""
template_header_ns_cpp = """
IFNDEF @_$_H
#define @_$_H

namespace @{
class ${

   public:
       $();
       ~$();
};
};

#endif

"""

template_source_ns_cpp = """
@::$::$(){}

@::$::~$(){}
"""

template_include = """
#include <stdio.h>
#include <string.h>

#ifndef DUMMY_TEST_H
#define DUMMY_TEST_H

#if __STDC_VERSION__ >= 201112L
#include <time.h>
#define _DUMMY_CLOCK_T struct timespec
#define _DUMMY_GET_TIME(t) timespec_get(&t, TIME_UTC)
#define _DUMMY_GET_NS(t) ((t).tv_nsec)
#elif __STDC_VERSION__ == 199901L
#include <time.h>
#include <stdint.h>

#define _DUMMY_CLOCK_T clock_t
#define _DUMMY_GET_TIME(t) ((t) = clock())
#define _DUMMY_GET_NS(t) (((t) * 1000000000L) / CLOCKS_PER_SEC)
#else
#include <time.h>

#define _DUMMY_CLOCK_T clock_t
#define _DUMMY_GET_TIME(t) ((t) = clock())
#define _DUMMY_GET_NS(t) (((t) * 1000000000L) / CLOCKS_PER_SEC)
#endif

#if __STDC_VERSION__ >= 199901L
#define DUMMY_API static inline
#define _DUMMY_API static inline
#define dummy_snprintf(buffer, size, format) snprintf(buffer, size, format)
#define FUNC __func__
#else
#define DUMMY_API static
#define _DUMMY_API static
#define dummy_snprintf(buffer, size, format) sprintf(buffer, format)
#define FUNC "unknow function - build with C99 or greater"
#endif

/**
 * Internal Macros, Constants, Functions and variables
 */
#define _DUMMY_TX_RED "\033[31m"
#define _DUMMY_TX_GREEN "\033[32m"
#define _DUMMY_TX_YELLOW "\033[33m"
#define _DUMMY_TX_BLUE "\033[34m"
#define _DUMMY_TX_ITALIC "\033[3m"
#define _DUMMY_TX_BOLD "\033[1m"
#define _DUMMY_TX_RESET "\033[0m"
#define _DUMMY_BG_RED "\033[41m"
#define _DUMMY_BG_GREEN "\033[42m"
#define _DUMMY_BG_YELLOW "\033[43m"
#define _DUMMY_BG_BLUE "\033[44m"
#define _DUMMY_BG_MAGENTA "\033[45m"
#define _DUMMY_BG_WHITE "\033[47m"
#define _DUMMY_BG_BLACK "\033[40m"
#define _DUMMY_TX_UNDERLINE "\033[4m"
#define _DUMMY_STRINGIFY(tok) #tok
#define _TAB_SUITE_N 42
#define _TAB_TEST_N 25

// typedef struct _dummy_memory{
//     size_t mem_size;
//     void* ptr_copy;
// }_dummy_memory;

// static _dummy_memory* _dummy_mem_array = NULL;


#define _DUMMY_ERROR(code)                                                                                                                                                                                                                                                                                         \
    do                                                                                                                                                                                                                                                                                                             \
    {                                                                                                                                                                                                                                                                                                              \
        fprintf(stderr,                                                                                                                                                                                                                                                                                            \
                _DUMMY_TX_RED _DUMMY_TX_BOLD "Wrong result for :" _DUMMY_TX_RESET " %s  \n $ " _DUMMY_TX_YELLOW "%s ->" _DUMMY_TX_RESET _DUMMY_TX_ITALIC " line:" _DUMMY_TX_RESET " " _DUMMY_BG_BLUE "%d" _DUMMY_TX_RESET "," _DUMMY_TX_ITALIC " file: " _DUMMY_TX_RESET _DUMMY_BG_BLUE "%s" _DUMMY_TX_RESET "\n", \
                FUNC, code, __LINE__, __FILE__);                                                                                                                                                                                                                                                                   \
    } while (0)

_DUMMY_API char *_internal_calc_tab(const char *str, size_t n)
{
    size_t l = n - strlen(str);
    char *s = malloc(l + 1);

    if (!s)
        _DUMMY_ERROR("malloc");

    memset(s, ' ', l);
    s[l] = '\0';

    return s;
}

/**
 * Types
 */
typedef struct dummy_code_t
{
    int code;
    char buffer[512];
} dummy_code_t;

typedef dummy_code_t (*Dummy_test_function)();

typedef struct dummy_single_test
{
    Dummy_test_function test;
    const char *name;
} Dummy_single_test;

/**
 * Public Macros
 */
#define DUMMY_TEST_SUCCESS 1
#define DUMMY_TEST_SKIP 2
#define DUMMY_TEST_ERROR 0

#define DUMMY_ASSERT_EQ(actual, expected)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \
    do
    {
        int match = actual == expected;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \
        dummy_code_t buff = {.code = match ? DUMMY_TEST_SUCCESS : DUMMY_TEST_ERROR, .buffer = {0}};                                                                                                                                                                                                                                                                                                                                                                                                                            \
        if (!match)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \
        {
            snprintf(buff.buffer, sizeof(buff.buffer), _DUMMY_TX_RED _DUMMY_TX_BOLD "              Assert failed: " _DUMMY_TX_RESET "[" _DUMMY_STRINGIFY(actual) " != " _DUMMY_TX_RESET _DUMMY_STRINGIFY(expected) "] \n              " _DUMMY_TX_UNDERLINE _DUMMY_TX_YELLOW "%s ->" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE _DUMMY_TX_ITALIC " line:" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE " %d" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "," _DUMMY_TX_ITALIC " file: " _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "%s" _DUMMY_TX_RESET "\n", \

        }
        return buff;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \
    } while (0)

#define DUMMY_ASSERT_NOT_EQ(actual, expected)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \
    do
    {
        int match = actual != expected;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \
        dummy_code_t buff = {.code = match ? DUMMY_TEST_SUCCESS : DUMMY_TEST_ERROR, .buffer = {0}};                                                                                                                                                                                                                                                                                                                                                                                                                            \
        if (!match)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \
        {                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \
            snprintf(buff.buffer, sizeof(buff.buffer), _DUMMY_TX_RED _DUMMY_TX_BOLD "              Assert failed: " _DUMMY_TX_RESET "[" _DUMMY_STRINGIFY(actual) " == " _DUMMY_TX_RESET _DUMMY_STRINGIFY(expected) "] \n              " _DUMMY_TX_UNDERLINE _DUMMY_TX_YELLOW "%s ->" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE _DUMMY_TX_ITALIC " line:" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE " %d" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "," _DUMMY_TX_ITALIC " file: " _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "%s" _DUMMY_TX_RESET "\n", \

        }
        return buff;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \
    } while (0)

#define DUMMY_ASSERT_EQ_NULL(actual)                                                                                                                                                                                                                                                                                                                                                                                                                                         \
    do                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \
    {                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \
        int match = actual == NULL;                                                                                                                                                                                                                                                                                                                                                                                                                                          \
        dummy_code_t buff = {.code = match ? DUMMY_TEST_SUCCESS : DUMMY_TEST_ERROR, .buffer = {0}};                                                                                                                                                                                                                                                                                                                                                                          \
        if (!match)                                                                                                                                                                                                                                                                                                                                                                                                                                                          \
        {                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \
            snprintf(buff.buffer, sizeof(buff.buffer), _DUMMY_TX_RED _DUMMY_TX_BOLD "              Assert failed: " _DUMMY_TX_RESET "[" _DUMMY_STRINGIFY(actual) " != " _DUMMY_TX_RESET "NULL"                                                                                                                                                                                                                                                                               \
                                                                                                                                                                 "] \n              " _DUMMY_TX_UNDERLINE _DUMMY_TX_YELLOW "%s ->" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE _DUMMY_TX_ITALIC " line:" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE " %d" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "," _DUMMY_TX_ITALIC " file: " _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "%s" _DUMMY_TX_RESET "\n", \
                     FUNC, __LINE__, __FILE__);                                                                                                                                                                                                                                                                                                                                                                                                                              \
        }                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \
        return buff;                                                                                                                                                                                                                                                                                                                                                                                                                                                         \
    } while (0)

#define DUMMY_ASSERT_NOT_EQ_NULL(actual)                                                                                                                                                                                                                                                                                                                                                                                                                                     \
    do                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \
    {                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \
        int match = actual != NULL;                                                                                                                                                                                                                                                                                                                                                                                                                                          \
        dummy_code_t buff = {.code = match ? DUMMY_TEST_SUCCESS : DUMMY_TEST_ERROR, .buffer = {0}};                                                                                                                                                                                                                                                                                                                                                                          \
        if (!match)                                                                                                                                                                                                                                                                                                                                                                                                                                                          \
        {                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \
            snprintf(buff.buffer, sizeof(buff.buffer), _DUMMY_TX_RED _DUMMY_TX_BOLD "              Assert failed: " _DUMMY_TX_RESET "[" _DUMMY_STRINGIFY(actual) " == " _DUMMY_TX_RESET "NULL"                                                                                                                                                                                                                                                                               \
                                                                                                                                                                 "] \n              " _DUMMY_TX_UNDERLINE _DUMMY_TX_YELLOW "%s ->" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE _DUMMY_TX_ITALIC " line:" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE " %d" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "," _DUMMY_TX_ITALIC " file: " _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "%s" _DUMMY_TX_RESET "\n", \
                     FUNC, __LINE__, __FILE__);                                                                                                                                                                                                                                                                                                                                                                                                                              \
        }                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \
        return buff;                                                                                                                                                                                                                                                                                                                                                                                                                                                         \
    } while (0)

#define DUMMY_ASSERT_EQ_STRING(actual, expected)                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \
    do
    {
        int match = !strcmp(actual, expected);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \
        dummy_code_t buff = {.code = match ? DUMMY_TEST_SUCCESS : DUMMY_TEST_ERROR, .buffer = {0}};                                                                                                                                                                                                                                                                                                                                                                                                                            \
        if (!match)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \
        {
            snprintf(buff.buffer, sizeof(buff.buffer), _DUMMY_TX_RED _DUMMY_TX_BOLD "              Assert failed: " _DUMMY_TX_RESET "[" _DUMMY_STRINGIFY(actual) " != " _DUMMY_TX_RESET _DUMMY_STRINGIFY(expected) "] \n              " _DUMMY_TX_UNDERLINE _DUMMY_TX_YELLOW "%s ->" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE _DUMMY_TX_ITALIC " line:" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE " %d" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "," _DUMMY_TX_ITALIC " file: " _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "%s" _DUMMY_TX_RESET "\n", \

        }
        return buff;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \
    } while (0)

#define DUMMY_ASSERT_NOT_EQ_STRING(actual, expected)                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \
    do
    {
        int match = strcmp(actual, expected);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \
        dummy_code_t buff = {.code = match ? DUMMY_TEST_SUCCESS : DUMMY_TEST_ERROR, .buffer = {0}};                                                                                                                                                                                                                                                                                                                                                                                                                            \
        if (!match)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \
        {                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \
            snprintf(buff.buffer, sizeof(buff.buffer), _DUMMY_TX_RED _DUMMY_TX_BOLD "              Assert failed: " _DUMMY_TX_RESET "[" _DUMMY_STRINGIFY(actual) " == " _DUMMY_TX_RESET _DUMMY_STRINGIFY(expected) "] \n              " _DUMMY_TX_UNDERLINE _DUMMY_TX_YELLOW "%s ->" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE _DUMMY_TX_ITALIC " line:" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE " %d" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "," _DUMMY_TX_ITALIC " file: " _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "%s" _DUMMY_TX_RESET "\n", \

        }
        return buff;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \
    } while (0)

#define DUMMY_ASSERT_IN(actual, array, lenght)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \
    do
    {
        int match = 0;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \
        for (int i = 0; i < lenght; i++)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \
        {
            if (array[i] == actual)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \
            {
                match = 1;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \
                break;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \
            }
        }
        dummy_code_t buff = {.code = match ? DUMMY_TEST_SUCCESS : DUMMY_TEST_ERROR, .buffer = {0}};                                                                                                                                                                                                                                                                                                                                                                                                                                   \
        if (!match)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \
        {
            snprintf(buff.buffer, sizeof(buff.buffer), _DUMMY_TX_RED _DUMMY_TX_BOLD "              Assert failed: " _DUMMY_TX_RESET "[" _DUMMY_STRINGIFY(actual) " is not in  " _DUMMY_TX_RESET _DUMMY_STRINGIFY(array) "[]] \n              " _DUMMY_TX_UNDERLINE _DUMMY_TX_YELLOW "%s ->" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE _DUMMY_TX_ITALIC " line:" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE " %d" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "," _DUMMY_TX_ITALIC " file: " _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "%s" _DUMMY_TX_RESET "\n", \

        }
        return buff
    } while (0)

#define DUMMY_ASSERT_NOT_IN(actual, array, lenght)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \
    do
    {
        int match = 0;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \
        for (int i = 0; i < lenght; i++)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \
        {
            if (array[i] == actual)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \
                match = 0;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \

            else                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \
                match = 1                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \
        }                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \
        dummy_code_t buff = {.code = match ? DUMMY_TEST_SUCCESS : DUMMY_TEST_ERROR, .buffer = {0}};                                                                                                                                                                                                                                                                                                                                                                                                                               \
        if (!match)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \
        {
            snprintf(buff.buffer, sizeof(buff.buffer), _DUMMY_TX_RED _DUMMY_TX_BOLD "              Assert failed: " _DUMMY_TX_RESET "[" _DUMMY_STRINGIFY(actual) " is in  " _DUMMY_TX_RESET _DUMMY_STRINGIFY(array) "[]] \n              " _DUMMY_TX_UNDERLINE _DUMMY_TX_YELLOW "%s ->" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE _DUMMY_TX_ITALIC " line:" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE " %d" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "," _DUMMY_TX_ITALIC " file: " _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "%s" _DUMMY_TX_RESET "\n", \

        }                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \
        return buff;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \
    } while (0)

#define DUMMY_ASSERT_TRUE(actual)                                                                                                                                                                                                                                                                                                                                                                                                                                            \
    do                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \
    {                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \
        int match = actual == 1;                                                                                                                                                                                                                                                                                                                                                                                                                                             \
        dummy_code_t buff = {.code = match ? DUMMY_TEST_SUCCESS : DUMMY_TEST_ERROR, .buffer = {0}};                                                                                                                                                                                                                                                                                                                                                                          \
        if (!match)                                                                                                                                                                                                                                                                                                                                                                                                                                                          \
        {                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \
            snprintf(buff.buffer, sizeof(buff.buffer), _DUMMY_TX_RED _DUMMY_TX_BOLD "              Assert failed: " _DUMMY_TX_RESET "[" _DUMMY_STRINGIFY(actual) " !=  TRUE"                                                                                                                                                                                                                                                                                                 \
                                                                                                                                                                 "] \n              " _DUMMY_TX_UNDERLINE _DUMMY_TX_YELLOW "%s ->" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE _DUMMY_TX_ITALIC " line:" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE " %d" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "," _DUMMY_TX_ITALIC " file: " _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "%s" _DUMMY_TX_RESET "\n", \
                     FUNC, __LINE__, __FILE__);                                                                                                                                                                                                                                                                                                                                                                                                                              \
        }                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \
        return buff;                                                                                                                                                                                                                                                                                                                                                                                                                                                         \
    } while (0)

#define DUMMY_ASSERT_FALSE(actual)                                                                                                                                                                                                                                                                                                                                                                                                                                           \
    do                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \
    {                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \
        int match = actual != 1;                                                                                                                                                                                                                                                                                                                                                                                                                                             \
        dummy_code_t buff = {.code = match ? DUMMY_TEST_SUCCESS : DUMMY_TEST_ERROR, .buffer = {0}};                                                                                                                                                                                                                                                                                                                                                                          \
        if (!match)                                                                                                                                                                                                                                                                                                                                                                                                                                                          \
        {                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \
            snprintf(buff.buffer, sizeof(buff.buffer), _DUMMY_TX_RED _DUMMY_TX_BOLD "              Assert failed: " _DUMMY_TX_RESET "[" _DUMMY_STRINGIFY(actual) " !=  FALSE"                                                                                                                                                                                                                                                                                                \
                                                                                                                                                                 "] \n              " _DUMMY_TX_UNDERLINE _DUMMY_TX_YELLOW "%s ->" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE _DUMMY_TX_ITALIC " line:" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE " %d" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "," _DUMMY_TX_ITALIC " file: " _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "%s" _DUMMY_TX_RESET "\n", \
                     FUNC, __LINE__, __FILE__);                                                                                                                                                                                                                                                                                                                                                                                                                              \
        }                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \
        return buff;                                                                                                                                                                                                                                                                                                                                                                                                                                                         \
    } while (0)

#define DUMMY_ASSERT_GREATER(actual, expected)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \
    do
    {
        int match = actual > expected;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \
        dummy_code_t buff = {.code = match ? DUMMY_TEST_SUCCESS : DUMMY_TEST_ERROR, .buffer = {0}};                                                                                                                                                                                                                                                                                                                                                                                                                            \
        if (!match)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \
        {
            snprintf(buff.buffer, sizeof(buff.buffer), _DUMMY_TX_RED _DUMMY_TX_BOLD "              Assert failed: " _DUMMY_TX_RESET "[" _DUMMY_STRINGIFY(actual) " <= " _DUMMY_TX_RESET _DUMMY_STRINGIFY(expected) "] \n              " _DUMMY_TX_UNDERLINE _DUMMY_TX_YELLOW "%s ->" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE _DUMMY_TX_ITALIC " line:" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE " %d" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "," _DUMMY_TX_ITALIC " file: " _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "%s" _DUMMY_TX_RESET "\n", \
                     FUNC, __LINE__, __FILE__);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \
        }
        return buff;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \
    } while (0)

#define DUMMY_ASSERT_GREATER_EQ(actual, expected)                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \
    do
    {
        int match = actual >= expected;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \
        dummy_code_t buff = {.code = match ? DUMMY_TEST_SUCCESS : DUMMY_TEST_ERROR, .buffer = {0}};                                                                                                                                                                                                                                                                                                                                                                                                                           \
        if (!match)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \
        {
            snprintf(buff.buffer, sizeof(buff.buffer), _DUMMY_TX_RED _DUMMY_TX_BOLD "              Assert failed: " _DUMMY_TX_RESET "[" _DUMMY_STRINGIFY(actual) " < " _DUMMY_TX_RESET _DUMMY_STRINGIFY(expected) "] \n              " _DUMMY_TX_UNDERLINE _DUMMY_TX_YELLOW "%s ->" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE _DUMMY_TX_ITALIC " line:" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE " %d" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "," _DUMMY_TX_ITALIC " file: " _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "%s" _DUMMY_TX_RESET "\n", \
                     FUNC, __LINE__, __FILE__);                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \
        }
        return buff;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \
    } while (0)

#define DUMMY_ASSERT_LESS(actual, expected)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \
    do
    {
        int match = actual < expected;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \
        dummy_code_t buff = {.code = match ? DUMMY_TEST_SUCCESS : DUMMY_TEST_ERROR, .buffer = {0}};                                                                                                                                                                                                                                                                                                                                                                                                                            \
        if (!match)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \
        {
            snprintf(buff.buffer, sizeof(buff.buffer), _DUMMY_TX_RED _DUMMY_TX_BOLD "              Assert failed: " _DUMMY_TX_RESET "[" _DUMMY_STRINGIFY(actual) " >= " _DUMMY_TX_RESET _DUMMY_STRINGIFY(expected) "] \n              " _DUMMY_TX_UNDERLINE _DUMMY_TX_YELLOW "%s ->" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE _DUMMY_TX_ITALIC " line:" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE " %d" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "," _DUMMY_TX_ITALIC " file: " _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "%s" _DUMMY_TX_RESET "\n", \

        }
        return buff;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \
    } while (0)

#define DUMMY_ASSERT_LESS_EQ(actual, expected)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \
    do
    {
        int match = actual <= expected;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \
        dummy_code_t buff = {.code = match ? DUMMY_TEST_SUCCESS : DUMMY_TEST_ERROR, .buffer = {0}};                                                                                                                                                                                                                                                                                                                                                                                                                           \
        if (!match)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \
        {                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \
            snprintf(buff.buffer, sizeof(buff.buffer), _DUMMY_TX_RED _DUMMY_TX_BOLD "              Assert failed: " _DUMMY_TX_RESET "[" _DUMMY_STRINGIFY(actual) " > " _DUMMY_TX_RESET _DUMMY_STRINGIFY(expected) "] \n              " _DUMMY_TX_UNDERLINE _DUMMY_TX_YELLOW "%s ->" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE _DUMMY_TX_ITALIC " line:" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE " %d" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "," _DUMMY_TX_ITALIC " file: " _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "%s" _DUMMY_TX_RESET "\n", \

        }
        return buff;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \
    } while (0)

#define DUMMY_ASSERT_EQ_ARRAY(actual, expected, lenght)                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \
    do
    {
        int match = 0;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \
        for (int i = 0; i < lenght; i++)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \
        {
            if (actual[i] == expected[i])                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \
            {
                match = 1;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \
            }
            else                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \
            {
                match = 0;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \
                break;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \
            }
        }
        dummy_code_t buff = {.code = match ? DUMMY_TEST_SUCCESS : DUMMY_TEST_ERROR, .buffer = {0}};                                                                                                                                                                                                                                                                                                                                                                                                                                \
        if (!match)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \
        {
            snprintf(buff.buffer, sizeof(buff.buffer), _DUMMY_TX_RED _DUMMY_TX_BOLD "              Assert failed: " _DUMMY_TX_RESET "[" _DUMMY_STRINGIFY(actual) "[] != " _DUMMY_TX_RESET _DUMMY_STRINGIFY(expected) "[]] \n              " _DUMMY_TX_UNDERLINE _DUMMY_TX_YELLOW "%s ->" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE _DUMMY_TX_ITALIC " line:" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE " %d" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "," _DUMMY_TX_ITALIC " file: " _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "%s" _DUMMY_TX_RESET "\n", \

        }
        return buff;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \
    } while (0)

#define DUMMY_ASSERT_NOT_EQ_ARRAY(actual, expected, lenght)                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \
    do
    {
        int match = 0;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \
        for (int i = 0; i < lenght; i++)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \
        {
            if (actual[i] == expected[i])                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \
            {
                match = 0;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \
            }
            else                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \
            {
                match = 0;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \
            }
        }
        dummy_code_t buff = {.code = match ? DUMMY_TEST_SUCCESS : DUMMY_TEST_ERROR, .buffer = {0}};                                                                                                                                                                                                                                                                                                                                                                                                                                \
        if (!match)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \
        {
            snprintf(buff.buffer, sizeof(buff.buffer), _DUMMY_TX_RED _DUMMY_TX_BOLD "              Assert failed: " _DUMMY_TX_RESET "[" _DUMMY_STRINGIFY(actual) "[] == " _DUMMY_TX_RESET _DUMMY_STRINGIFY(expected) "[]] \n              " _DUMMY_TX_UNDERLINE _DUMMY_TX_YELLOW "%s ->" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE _DUMMY_TX_ITALIC " line:" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE " %d" _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "," _DUMMY_TX_ITALIC " file: " _DUMMY_TX_RESET _DUMMY_TX_UNDERLINE "%s" _DUMMY_TX_RESET "\n", \

        }
        return buff;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \
    } while (0)

#define DUMMY_END                                                        \
    dummy_code_t end_buff = {.code = DUMMY_TEST_SUCCESS, .buffer = {0}}; \
    return end_buff;

#define DUMMY_SKIP_HERE                                                \
    dummy_code_t skip_buff = {.code = DUMMY_TEST_SKIP, .buffer = {0}}; \
    return skip_buff;

/** Public Function */
DUMMY_API void print_logo()
{
    puts(_DUMMY_TX_BOLD
        "    _____                                    _______        _   \n"
        "   |  __ \\                                  |__   __|      | |  \n"
        "   | |  | |_   _ _ __ ___  _ __ ___  _   _     | | ___  ___| |_ \n"
        "   | |  | | | | | '_ ` _ \\| '_ ` _ \\| | | |    | |/ _ \\/ __| __|\n"
        "   | |__| | |_| | | | | | | | | | | | |_| |    | |  __/\\__ \\ |_ \n"
        "   |_____/ \\__,_|_| |_| |_|_| |_| |_|\\__, |    |_|\\___||___/\\__|\n"
        "                                       _/ |                     \n"
    );
    puts("                                     |___/                      \n" _DUMMY_TX_RESET);
}

/**
 * Global variables
 */


DUMMY_API void dummy_test_suite(Dummy_single_test tests[], int lenght, const char *name)
{
    dummy_code_t local_code;
    int local_state;
    long int diff_ns;
    int n_tests = 0;
    _DUMMY_CLOCK_T before;
    _DUMMY_CLOCK_T after;
    char *tab;
    int i;

    char *tab_name = _internal_calc_tab(name, _TAB_SUITE_N);
    printf(_DUMMY_TX_BOLD _DUMMY_BG_BLUE "SUITE" _DUMMY_TX_RESET _DUMMY_BG_BLUE "                   %s %s" _DUMMY_TX_RESET "\n", name, tab_name);
    puts("-------------------------------------------------------------------");

    for (i = 0; i < lenght; i++)
    {
        _DUMMY_GET_TIME(before);
        local_code = tests[i].test();
        _DUMMY_GET_TIME(after);
        local_state = local_code.code;
        diff_ns = (int)_DUMMY_GET_NS(after) - _DUMMY_GET_NS(before);
        tab = _internal_calc_tab(tests[i].name, _TAB_TEST_N);

        switch (local_state)
        {
        case DUMMY_TEST_SUCCESS:
            printf(_DUMMY_BG_GREEN _DUMMY_TX_BOLD "%d.       PASS " _DUMMY_TX_RESET _DUMMY_TX_ITALIC "          %s %s" _DUMMY_TX_RESET " %ldns\n", i + 1, tests[i].name, tab, diff_ns);
            n_tests++;
            continue;
        case DUMMY_TEST_SKIP:
            n_tests++;
            continue;
        case DUMMY_TEST_ERROR:
            printf(_DUMMY_BG_RED _DUMMY_TX_BOLD "%d.       FAIL " _DUMMY_TX_RESET _DUMMY_TX_ITALIC "          %s %s" _DUMMY_TX_RESET " %ldns\n", i + 1, tests[i].name, tab, diff_ns);
            printf("%s\n", local_code.buffer);
            n_tests++;
            continue;
        }

        free(tab);
    }
    puts("-------------------------------------------------------------------");
    printf("Executed: %d tests\n", n_tests);
}


// void* dummy_malloc(size_t size){
//     void* ptr = malloc(size);

   
// }

// void dummy_free(void* ptr){
//     free(ptr);

// }
#endif


"""







"""

 // __SECTION FUNCTIONS //

"""



def replace_placeholder(s, name, ph):
    """
    Replace in a string a certain token
    """
    txt = s.replace(name, ph)
    return txt



def create_include_list(h_list):
    """
    Create an header with #include... list for the  C file
    """
    include_list = []
    for i in h_list:
        include_list.append('#include "' + i + '"\n')
        
    return include_list

"""
Returns the test name from the path
"""
def clean_fp_in_str(file_path):
    tmp_i = file_path.find("test_")
    ext_i = file_path.find(".c" or ".h")
    return file_path[tmp_i + 5: ext_i - 1]


"""
Utility in CLI for setting void spaces
"""
def fill_void(str):
    total = len(str)
    return " " * (43 - total)

"""
Set parameters to the dummy_test_suite function in main
"""
def set_args_dummy_test_suite_func(file_path):
     tmp_suite = file_path.split("tests/src/test_")
     name_suite = tmp_suite[1].split(".c")
     dec_suite = (replace_placeholder(template_main_func,  name_suite[0] + "_tests", "$" ))
     len_suite = (replace_placeholder(dec_suite, str(count_tests(name_suite[0])), "£" ))
     tok_suite = (replace_placeholder(len_suite, '"' + name_suite[0] + '"', "@" ))
     return tok_suite

"""
Print Help
"""
def print_help():
    print(help_output)

"""
Obtain from the arg of the make test cli command the suite name
"""
def parse_suite_from_maketest(arg):
    index_suite = arg.find(':')
    check_maketest_input(index_suite)
    return arg[: (index_suite)]

"""
Obtain from the arg of the make test cli command the test name
"""
def parse_test_from_maketest(arg):
    index_suite = arg.find(':')
    check_maketest_input(index_suite)
    return "test_" + arg[(index_suite + 1): len(arg)]


"""
Check if is a syntax error in the make test cli command
"""
def check_maketest_input(index_suite):
    if (index_suite == -1):
        print("usage: dummytest --make test <suite_name>:<test_name>\nUse 'dummytest --help' for more information.")

        
"""
Return the number of the test of a specific suite
"""
def count_tests(name_suite):
    with open("tests/src/test_" + name_suite + ".c", "r") as file:
        content_file = file.read()
        return content_file.count("dummy_code_t")

    
"""
Create the main.c file
"""
def create_main():
    with open("test.c", "w") as main_file:
        # file_content = replace_placeholder(template_main, , '$')
        main_file.write(template_main)

        
"""
Obtain the list of the test of a certain Suite
"""
def take_tests(file_name, suite_name):
    with open(file_name, "r") as file:
        file_content = file.read()
        return re.findall(test_regex, file_content)



def success_create(type_elem, name):
    print(dummy_tx_green + type_elem + " " +  dummy_tx_bold + name + dummy_tx_reset +
              dummy_tx_green + ' is successfully created' + dummy_tx_reset)

def success_delete(type_elem, name):
    print(dummy_tx_green + type_elem + " " +  dummy_tx_bold + name + dummy_tx_reset +
              dummy_tx_green + ' is successfully deleted' + dummy_tx_reset)

def create_file(path, content):
    with open(path, 'x') as f:
        f.write(content)
        
"""

Update from the arg of the make test command the source file
"""
def update_test_cfile(arg):
    suite_name = parse_suite_from_maketest(arg)
    test_name = parse_test_from_maketest(arg)
    update_file = ""
    
    with open("tests/src/test_" + suite_name + ".c", "r") as test_file:
        local_copy_file = test_file.read()
        if (local_copy_file.find(replace_placeholder(
                template_unit, test_name, '$')) != -1):
            print(
                dummy_tx_yellow + "Test already exists. Choose a different name or remove the existing suite." + dummy_tx_reset)
            exit()
            
        new_copy_file = insert_test_in_suite(
            local_copy_file, suite_name, test_name)
        file_content_unit = replace_placeholder(
            template_unit, test_name, '$')
        suite_func_index = new_copy_file.find("Dummy_single_test")
        
        update_file = new_copy_file[:suite_func_index] + \
            file_content_unit + new_copy_file[suite_func_index:]

        with open("tests/src/test_" + suite_name + ".c", "w") as test_file:
            test_file.write(update_file)

            
"""
Update from the arg of the make test command the header file
"""
def update_test_hfile(arg):
    index_suite = arg.find(':')
    check_maketest_input(index_suite)
    suite_name = parse_suite_from_maketest(arg)
    test_name = parse_test_from_maketest(arg)
    update_h_file = ""

    with open("tests/include/test_" + suite_name + ".h", "r") as h_file:
        copy_h_file = h_file.read()
        end_of_file = copy_h_file.find("#endif")
        update_h_file = copy_h_file[:end_of_file] + replace_placeholder(
            template_unit_func, test_name, '$') + copy_h_file[end_of_file:]
        
        with open("tests/include/test_" + suite_name + ".h", "w") as h_file:
            h_file.write(update_h_file)
            success_create('Test ', test_name[5 :])
    

            
def insert_test_in_suite(local_copy_file, suite_name, test_name):
    func_name = "Dummy_single_test " + suite_name + "_tests[]"
    func_index = local_copy_file.find(func_name)
    value = '{' + test_name + ',' + '"' + test_name + '"' + '}'

    if (func_index == -1):
        print(dummy_tx_red + "Error with file: " + dummy_tx_red + dummy_tx_bold +
              func_name + dummy_tx_reset + dummy_tx_red + " is missing" + dummy_tx_reset)
        exit()

    offset_func = len(local_copy_file[:func_index])
    start_bracket_index = local_copy_file[func_index:].find('{') + offset_func
    end_bracket_index = local_copy_file[(start_bracket_index):].find(
        '};') + start_bracket_index

    if (start_bracket_index == -1 or end_bracket_index == -1 or start_bracket_index > end_bracket_index):
        print(dummy_tx_red + "Error with file: " + dummy_tx_red + dummy_tx_bold +
              "{}" + dummy_tx_reset + dummy_tx_red + " are missing" + dummy_tx_reset)
        exit()

    comma_counter = 0
    is_void = True

    for c in local_copy_file[start_bracket_index: end_bracket_index]:
        if (c == ','):
            comma_counter += 1

    for c in local_copy_file[start_bracket_index + 1: end_bracket_index]:
        if not c.isspace():
            is_void = False
            break

    new_copy_file = ""

    # When the list is void
    if (comma_counter == 0 and is_void):
        new_copy_file = local_copy_file[0: start_bracket_index] + local_copy_file[start_bracket_index] + \
            value + local_copy_file[end_bracket_index:]
    # Other cases
    if (not is_void):
        new_copy_file = local_copy_file[0: start_bracket_index] + \
            local_copy_file[start_bracket_index: end_bracket_index] + \
            ", " + value + local_copy_file[end_bracket_index:]

    return new_copy_file


def set_makefile(file_list):
    local_copy_json = {}
    try:
        with open("config.json", "r") as config_file:
            if (os.path.getsize("config.json") <= 0):
                local_copy_json = {}
            else:
                local_copy_json = json.load(config_file)
                print(local_copy_json['src'])
    except FileNotFoundError:
            print(
                dummy_tx_yellow + "No configuration in config.json" + dummy_tx_reset)
        
    if(os.path.exists("Makefile")):
        os.remove("Makefile")
        
    with open("Makefile", "x") as make_file:
        src_list = " ".join(file_list) + "\n"
        print(src_list)
        std_v = "c11"
        if(len(local_copy_json) > 0 and local_copy_json["std"]):
            std_v = local_copy_json["std"]
            
        file_content = replace_placeholder(template_make_file, src_list, '£')
        file_content_std = replace_placeholder(file_content, std_v, '§')
        make_file.write(file_content_std)



def get_suite(path, name=""):
    file_list = []
    source_list = []
    if (name != ""):
        for f in os.listdir(path):
            if (name == f and not f.find(".o")):
                file_list.append(f)
                source_str = path + f
                source_list.append(source_str)
    else:
        for f in os.listdir(path):
            file_list.append(f)
            source_str = path + f
            source_list.append(source_str)
    return source_list


def get_suite_func():
    h_list = get_suite(path_h, "")
    func_list = []
    for f in h_list:
        with open(f, "r") as file:
            file_content = file.read()
            func_index = file_content.find("extern Dummy_single_test")
            # print(file_content[func_index :])
            comma_index = file_content[func_index:].find(
                ";") + len(file_content[:func_index])
            print(file_content[func_index:comma_index])
            func_list.append(file_content[func_index: comma_index])

    return func_list




def config_json(field, value):
    local_copy = {}
    if (not os.path.exists("config.json")):
        with open("config.json", "x") as config_file:
            data = {field: value}
            config_file.write(json.dumps(data))
            print(dummy_tx_green + 'Config is successfully created' + dummy_tx_reset)
    else:
        try:
            with open("config.json", "r") as config_file:
                if (os.path.getsize("config.json") <= 0):
                    local_copy = {}
                else:
                    local_copy = json.load(config_file)

        except json.JSONDecodeError:
            print(
                dummy_tx_red + "Error with json decoding. Control if there is the config.json file")

        local_copy[field] = value

        with open("config.json", "w") as config_file:
            config_file.write(json.dumps(local_copy))
            print(dummy_tx_green + 'Config is successfully updated: ' + dummy_tx_bold + field +
                  dummy_tx_reset + dummy_tx_green + " -> " + dummy_tx_bold + value + dummy_tx_reset)



            
"""

  // __SECTION COMMANDS //


"""

"""
Dummy test --init command
"""
def dummy_init():
    os.mkdir("tests")
    os.mkdir("include")
    create_file("include/dummy.h", template_include)
    os.mkdir("src")
    os.mkdir("logs")
    os.mkdir("doc")
    os.makedirs("tests/src", exist_ok=True)
    os.makedirs("tests/include", exist_ok=True)
    os.mkdir("dataset")
    print(dummy_tx_green + 'Project is successfully created' + dummy_tx_reset)

    
"""
Dummy test --clean command
"""
def dummy_clean():
    choice = input(dummy_tx_red + "Are you sure?[" + "y/" + dummy_tx_red +
                   dummy_tx_bold + "N" + dummy_tx_reset + dummy_tx_red + "] " + dummy_tx_reset)
    if (choice == "Y" or choice == 'y'):
        if (os.path.exists("test.c")):
            os.remove("test.c")
        if (os.path.exists("test")):
            os.remove("test")
        if (os.path.exists("test.o")):
            os.remove("test.o")
        if (os.path.exists("config.json")):
            os.remove("config.json")
        if (os.path.exists("Makefile")):
            os.remove("Makefile")
        if (os.path.exists("dataset")):
            shutil.rmtree("dataset")
        if (os.path.exists("tests")):
            shutil.rmtree("tests")
        if (os.path.exists("include")):
            shutil.rmtree("include")
        if (os.path.exists("src")):
            shutil.rmtree("src")
        if (os.path.exists("logs")):
            shutil.rmtree("logs")
        if (os.path.exists("doc")):
            shutil.rmtree("doc")
        print(dummy_tx_green + 'Project is successfully cleaned' + dummy_tx_reset)


"""Dummy test make test command"""        
def make_test(name):
    try:
        update_test_cfile(name)
        update_test_hfile(name)
        
    except FileNotFoundError:
        print(dummy_tx_red + "Suite" + dummy_tx_bold + " " + suite_name + " " +
              dummy_tx_reset + dummy_tx_red + "doesn't exist" + dummy_tx_reset)

"""
To do
"""
def remove_test(name):
    print("ok")


    
def make_suite(name):
    try:
        with open("tests/src/test_" + name + ".c", "x") as test_file:
            file_content = replace_placeholder(
                template_suite, name + "_tests", '$')
            test_file.write(file_content)

            with open("tests/include/test_" + name + ".h", "x") as h_file:
                h_content = replace_placeholder(
                    template_suite_h, name + "_tests", '$')
                upper_name = name.upper()
                h_content = replace_placeholder(
                    h_content, upper_name + "_TESTS", '@')
                h_content = replace_placeholder(
                    h_content, upper_name + "_TESTS", '@')
                h_file.write(h_content)
            success_create('Suite ', name)

    except FileExistsError:
        print(dummy_tx_yellow + "Suite already exists. Choose a different name or remove the existing suite." + dummy_tx_reset)


        
def remove_suite(name):
    path = "tests/src/test_" + name + ".c"
    h_path = "tests/include/test_" + name + ".h"
    if (os.path.exists(path) and os.path.exists(h_path)):
        choice = input(dummy_tx_red + "Are you sure?[" + "y/" + dummy_tx_red +
                       dummy_tx_bold + "N" + dummy_tx_reset + dummy_tx_red + "] " + dummy_tx_reset)
        if (choice == "Y" or choice == 'y'):
            os.remove(path)
            os.remove(h_path)
            success_delete('Suite', name)
            exit()
        elif (choice == 'N' or choice == 'n'):
            exit()
    else:
        print(dummy_tx_yellow + "No Suite with this name was found" + dummy_tx_reset)





        
def build_all():
    create_main()
    file_list = []
    h_list = get_suite(path_h, "")
    src_list = get_suite(path_tests, "")
    include_list = create_include_list(h_list)
    local_copy = ""
    
    with open("test.c", "r") as main_file:
        local_copy = main_file.read()
        include_index = local_copy.find('#include "include/dummytest.h"')
        if (include_index == -1):
            print(dummy_tx_green + "Error with file test.c: inclusion of " +
                  dummy_tx_bold + "dummytest.h" + dummy_tx_reset + dummy_tx_green + "is missing")
            exit()
        new_local_copy = local_copy[:include_index] + \
            "".join(include_list) + local_copy[include_index:]

    suite_list = []
    
    
    for s in src_list:
        if(s.find(".o") != -1):
            continue
        suite_func_text = set_args_dummy_test_suite_func(s)
        suite_list.append( suite_func_text + ";")
        
    
    with open("test.c", "w") as main_file:
        index_print_logo = new_local_copy.find("print_logo()")
        comma_index = new_local_copy[index_print_logo:].find(";") + len(new_local_copy[:index_print_logo])
        final_file = new_local_copy[:comma_index + 1] + "".join(suite_list) + new_local_copy[comma_index :]
        main_file.write(final_file)
    set_makefile(get_suite(path_tests, ""))
    os.system("make")



#Todo
def build_suite():
    print("ok")



def list_all():
    include_list = get_suite(path_h, "")
        
    for l in include_list:
        name = clean_fp_in_str(l) 
        print( dummy_tx_bold + dummy_bg_blue + "SUITE                   " +  dummy_tx_reset + dummy_bg_blue +   name  + fill_void(name) + dummy_tx_reset)
        tests = take_tests(l, name)
        i = 1
        for t in tests:
            print(" " + str(i) + ".                     " + t )
            i += 1


#Todo
def list_suite():
    print("ok")

def get_header(name, ns):
    if(ns):
        h_f =  replace_placeholder(template_header_ns_cpp, name, "$" );
        h_f_ns = h_f =  replace_placeholder(h_f, name, "@" );
        return h_f_ns
    return  replace_placeholder(template_header_cpp, name, "$" );

def make_class(arg, h_flag):
    # ns_name =   parse_suite_from_maketest(arg)
    # f_name = parse_test_from_maketest(arg)
    f_name = arg
    ns_name = False
    if(h_flag):
        create_file("include/" + f_name + ".h", get_header(f_name, ns_name))

    
"""

  // __SECTION PROGRAM //


"""

make_class("vector", True)

if (len(sys.argv) < 2):
    print("usage: dummytest <action> <type> <name>\nUse 'dummytest --help' for more information.")
    exit()
if (sys.argv[1] == '-i' or sys.argv[1] == '--init'):
    dummy_init()
    if (len(sys.argv) == 3):
        config_json('project', sys.argv[2])

elif (sys.argv[1] == "-m" or sys.argv[1] == "--make"):
    if (len(sys.argv) == 4):
        match(sys.argv[2]):
            case "suite":
                make_suite(sys.argv[3])
            case "test":
                make_test(sys.argv[3])
            case _:
                print("usage: dummytest --make <type> <name>")
    else:
        print("usage: dummytest --make <type> <name>\nUse 'dummytest --help' for more information.")
elif (sys.argv[1] == "-r" or sys.argv[1] == "--remove"):
    if (len(sys.argv) == 4):
        match(sys.argv[2]):
            case "suite":
                remove_suite(sys.argv[3])
            case "test":
                remove_test(sys.argv[3])
            case _:
                print("usage: dummytest --remove <type> <name>")
    else:
        print("usage: dummytest --remove <type> <name>\nUse 'dummytest --help' for more information.")
elif (sys.argv[1] == "-b" or sys.argv[1] == "--build"):
    if (len(sys.argv) >= 3):
        match(sys.argv[2]):
            case "all":
                build_all()
            case "suite":
                build_suite()
            case _:
                print("usage: dummytest --build <type> <name>")
    else:
        print(
            "usage: dummytest --build <mode>\nUse 'dummytest --help' for more information.")
elif (sys.argv[1] == "-l" or sys.argv[1] == "--list"):
    if (len(sys.argv) >= 3):
        match(sys.argv[2]):
            case "all":
                list_all()
            case "suite":
                list_suite()
            case _:
                print("usage: dummytest --list <type> <name>")
    else:
        print(
            "usage: dummytest --list <mode>\nUse 'dummytest --help' for more information.")
elif (sys.argv[1] == "-R" or sys.argv[1] == "--run"):
    if (os.path.exists("test")):
        os.system("./test")
    else:
        print("First lanch --build command\nUse 'dummytest --help' for more information.")
elif (sys.argv[1] == "-c" or sys.argv[1] == "--config"):
    if (len(sys.argv) == 4):
        config_json(sys.argv[2], sys.argv[3])
    else:
        print("usage: dummytest --config <field> <value>")
elif (sys.argv[1] == "-C" or sys.argv[1] == "--clean"):
    dummy_clean()
elif(sys.argv[1] == "-h" or sys.argv[1] == "--help"):
    print_help()
else:
    print_help()


